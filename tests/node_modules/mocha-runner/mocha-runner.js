"use strict";

var SPAWN = require ("child_process").spawn;
var FS = require ("fs");
var ASYNC = require ("async");
var File = require ("file-utils").File;

var endsWith = function (str, suffix){
	return str.indexOf (suffix, str.length - suffix.length) !== -1;
};

var Runner = module.exports = function (params){
	var tests = params.tests || [];
	if (tests.length === 0) throw new Error ("No tests to run");
	
	var me = this;
	this._args = [
		__dirname + "/node_modules/mocha/bin/_mocha",
		"-R",
		params.reporter || "dot"
	];
	
	for (var i=0, len=tests.length; i<len; i++){
		var test = tests[i];
		if (!endsWith (test, ".js")){
			test += ".js";
		}
		me._args.push (test);
		tests[i] = test;
	}
	
	this._exclude = params.exclude || [];
	this._include = params.include || [];
	this._cwd = new File (".");
	this._exclude = this._exclude.concat (tests, "node_modules",
			new File (process.mainModule.filename).getName ());
};

Runner.prototype._clean = function (cb){
	if (this._include.length){
		ASYNC.forEach (this._include, function (entry, cb){
			new File (entry, true).remove (cb);
		}, cb);
		return;
	}

	var remove = function (entry){
		var found = false;
		for (var i=0, len=me._exclude.length; i<len; i++){
			if (me._exclude[i] === entry){
				found = true;
				break;
			}
		}
		return !found;
	};
	
	var entries = [];
	var me = this;
	
	this._cwd.tree (function (name, path){
		if (remove (name)) entries.push (path);
		return true;
	}, 1, function (error){
		if (error) return cb (error);
		ASYNC.forEach (entries, function (entry, cb){
			new File (entry, true).remove (cb);
		}, cb);
	});
};

Runner.prototype.run = function (cb){
	var me = this;
	this._clean (function (error){
		if (error){
			if (cb) cb (error);
			return;
		}
		SPAWN ("node", me._args, { cwd: me._cwd.getPath (), customFds: [0, 1, 2] })
				.on ("exit", function (){
			if (cb) cb (null);
		});
	});
};